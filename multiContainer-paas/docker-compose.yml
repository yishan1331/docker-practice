version: "3.7"
services:
    php:
        build:
            context: ${SERVICES_DIR}/php
            args:
                # PHP_VERSION: php:${PHP_VERSION}-fpm-alpine
                PHP_VERSION: php:${PHP_VERSION}-fpm
                PHP_EXTENSIONS: ${PHP_EXTENSIONS}
                CONTAINER_PACKAGE_URL: ${CONTAINER_PACKAGE_URL}
                TZ: "$TZ"
        container_name: php
        volumes:
            - ${PHP_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
            # php-fpm 的配置
            - ${PHP_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/zz-docker.conf:rw
            # 挂载宿主机 socket 目录，因为 nginx 服务也需要访问
            - ${PHP_FPM_SOCK_DIR}:/run/php/
            - ${PHP_LOG_DIR}:/var/log/php
            # 需將有包含php的html一併掛載進php-fpm service內才能順利抓取php file
            - api-html:/var/www/html/API:rw
            - web-html:/var/www/html/WEB:rw
            - paas-dashboard:/var/www/spdpaas/src/dashboard:rw
        restart: always
        environment:
            TZ: "$TZ"
            LANG: C.UTF-8

    nginx:
        build:
            context: ${SERVICES_DIR}/nginx/web
            args:
                TZ: "$TZ"
        # image: nginx
        container_name: nginx_web
        ports:
            - ${NGINX_WEB_HTTP_HOST_PORT}:80
            - ${NGINX_WEB_HTTPS_HOST_PORT}:443
        volumes:
            - ${NGINX_WEB_CONFD_DIR}:/etc/nginx/conf.d/:rw
            - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:rw

            - web-html:/var/www/html/WEB:rw

            - ${NGINX_LOG_DIR}/web:/var/log/nginx/:rw

            # link php-fpm sock
            - ${PHP_FPM_SOCK_DIR}:/run/php/

            # - ${DATA_DIR}/certbot/conf:/etc/letsencrypt
            # - ${DATA_DIR}/certbot/var:/var/lib/letsencrypt
            - ${NGINX_SSL_CERTIFICATE_DIR}:/etc/nginx/ssl:rw

            # - ${NGINX_FASTCGI_PHP_CONF}:/etc/nginx/fastcgi-php.conf:ro
            # - ${NGINX_FASTCGI_PARAMS}:/etc/nginx/fastcgi_params:ro
        restart: always
        environment:
            TZ: "$TZ"
            LANG: C.UTF-8
    
    nginx_api:
        build:
            context: ${SERVICES_DIR}/nginx/api
            args:
                TZ: "$TZ"
        # image: nginx
        container_name: nginx_api
        ports:
            - ${NGINX_UWASI_HOST_PORT}:3687
        volumes:
            - ${NGINX_API_CONFD_DIR}:/etc/nginx/templates
            # - ${NGINX_API_CONFD_DIR}:/etc/nginx/conf.d/:rw
            - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:ro
            - ${NGINX_LOG_DIR}/api:/var/log/nginx/:rw

            # - ${DATA_DIR}/certbot/conf:/etc/letsencrypt
            # - ${DATA_DIR}/certbot/var:/var/lib/letsencrypt
            - ${NGINX_SSL_CERTIFICATE_DIR}:/etc/nginx/ssl:rw
            
            # ${UWSGI_SOCK_DIR}:/run/uwsgi/

            # - ${NGINX_FASTCGI_PHP_CONF}:/etc/nginx/fastcgi-php.conf:ro
            # - ${NGINX_FASTCGI_PARAMS}:/etc/nginx/fastcgi_params:ro

            # link php-fpm sock
            - ${PHP_FPM_SOCK_DIR}:/run/php/

            - api-html:/var/www/html/API:rw
            - paas-dashboard:/var/www/spdpaas/src/dashboard:rw

        restart: always
        environment:
            TZ: "$TZ"
            UWSGI_PORT: ${NGINX_UWASI_HOST_PORT}
            LANG: C.UTF-8
        command:
            [
                "/bin/sh",
                "-c",
                "envsubst '$$UWSGI_PORT' < /etc/nginx/templates/spdpaas_nginx.conf.template > /etc/nginx/conf.d/spdpaas_nginx.conf && exec nginx -g 'daemon off;'",
            ]
        depends_on:
            - flask_app
        links:
            - flask_app
    
    flask_app:
        build:
            context: ${SERVICES_DIR}/flask
            args:
                TZ: "$TZ"
        container_name: flask_app
        # user: www-data
        expose:
            - ${NGINX_UWASI_HOST_PORT}
        volumes:
            - ./wait-for-it.sh:/wait-for-it.sh
            # - ${UWSGI_LOG_DIR}:/var/log/uwsgi/:rw
            # - ${FLASK_LOG_DIR}:/var/www/spdpaas/log/:ro

            # - ${UWSGI_SOCK_DIR}:/var/www/spdpaas/run/
            - paas-data:/var/www/spdpaas/src/
            - api-html:/var/www/html/API:rw
            - paas-dashboard:/var/www/spdpaas/dashboard:rw
        # command:
        #     [
        #         "/bin/sh",
        #         "-c",
        #         "/wait-for-it.sh mysql:3306 postgres:5432 redis:6379 -t 10 -- uwsgi -i spdpaas_uwsgi.ini",
        #     ]
        sysctls:
            - net.core.somaxconn=32678
        restart: always
        environment:
            TZ: "$TZ"
            LANG: C.UTF-8
        env_file:
            - .env
        depends_on:
            - redis
            - postgres
            - mysql
            - php
        links:
            - redis
            - postgres
            - mysql

    # certbot:
    #     image: certbot/certbot:latest
    #     command: certonly --webroot --register-unsafely-without-email --webroot-path=/var/www/certbot --agree-tos  -d spdpaas.com -d www.spdpaas.com
    #     volumes:
    #         - ${DATA_DIR}/certbot/conf:/etc/letsencrypt
    #         - ${DATA_DIR}/certbot/var:/var/lib/letsencrypt
    #         - ${DATA_DIR}/certbot/log:/var/log/letsencrypt
    #         - ${DATA_DIR}/certbot/data:/var/www/certbot

    redis:
        # build:
        #     context: ${SERVICES_DIR}/redis
        #     args:
        #         REDIS_REQUIREPASS: ${REDIS_REQUIREPASS}
        #         TZ: "$TZ"
        image: redis
        container_name: redis
        ports:
            - ${REDIS_HOST_PORT}:6379
        volumes:
            - ${REDIS_CONF_FILE}:/etc/redis.conf:ro
            - ${PWD}/${DATA_DIR}/redis/dump:/data/:rw
            - ${PWD}/${DATA_DIR}/redis/log:/var/log/redis/:rw
        restart: always
        # command: bash -c '[ "$$REDIS_PASS_FILE" ] &&
        # ( cat "$$REDIS_PASS_FILE" | xargs -0 redis-server --requirepass ) || redis-server'
        command: ["redis-server", "/etc/redis.conf", "--requirepass", "${REDIS_REQUIREPASS}"]
        # entrypoint: ["redis-server", "/etc/redis.conf"]
        environment:
            TZ: "$TZ"
            LANG: C.UTF-8

    postgres:
        image: postgres
        container_name: postgres
        expose:
            - ${POSTGRES_HOST_PORT}
        volumes:
            - ${POSTGRES_CONF_FILE}:/etc/postgresql/postgresql.conf:ro
            - ${POSTGRES_HBA_CONF_FILE}:/etc/postgresql/pg_hba.conf:ro
            - ${PWD}/${SERVICES_DIR}/postgres/initdb.d:/docker-entrypoint-initdb.d
            - ${PWD}/${DATA_DIR}/postgres:/var/lib/postgresql/data:rw
        restart: always
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_PAAS_USER: ${POSTGRES_PAAS_USER}
            POSTGRES_PAAS_PASSWORD: ${POSTGRES_PAAS_PASSWORD}
            TZ: "$TZ"
            # LC_ALL: en_US.UTF-8
            LANG: C.UTF-8
                
    mysql:
        image: mariadb:${MARIADB_VERSION}
        container_name: mysql
        # ports:
        #     - ${MYSQL_HOST_PORT}:3306
        expose:
            - ${MYSQL_HOST_PORT}
        volumes:
            - ${MYSQL_CONF_FILE}:/etc/mysql/conf.d/:ro
            - ${PWD}/${DATA_DIR}/mysql:/var/lib/mysql/:rw
            - ${PWD}/${SERVICES_DIR}/mysql/initdb.d:/docker-entrypoint-initdb.d
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            TZ: "$TZ"
            LANG: C.UTF-8

    celeryworker:
        build:
            context: ${PWD}/${SERVICES_DIR}/celery
            args:
                TZ: "$TZ"
        container_name: celeryworker
        volumes:
            # - ./wait-for-it.sh:/wait-for-it.sh
            - ${CELERY_LOG_DIR}:/var/log/celery/:rw
            - ${PWD}/${SERVICES_DIR}/flask/var/www/spdpaas/src/app/globalvar.py:/var/app/globalvar.py:ro
            - ${PWD}/${SERVICES_DIR}/flask/var/www/spdpaas/config/constants.conf:/var/app/config.conf:ro
        # command:
        #     [
        #         "/bin/sh",
        #         "-c",
        #         "/wait-for-it.sh redis:6379 postgres:5432 -t 5 -- celery -A celeryWorker worker --pidfile=/var/run/worker.pid --loglevel=ERROR --logfile=/var/log/celery/worker.log -c 1000 -P gevent -O fair",
        #     ]
        restart: always
        environment:
            TZ: "$TZ"
            LANG: C.UTF-8
        env_file:
            - .env
        depends_on:
            - redis
            - postgres
        links:
            - redis
            - postgres

    # worker2:
    #     build:
    #         context: ${SERVICES_DIR}/celery
    #         args:
    #             TZ: "$TZ"
    #     volumes:
    #         - ./wait-for-it.sh:/wait-for-it.sh
    #         - ${DATA_DIR}/${CELERY_LOG_DIR}:/var/log/celery/:rw
    #     command:
    #         [
    #             "/bin/sh",
    #             "-c",
    #             "/wait-for-it.sh redis:6379 -t 5 -- celery -A celeryWorker worker --pidfile=/var/run/worker2.pid --loglevel=debug --logfile=/var/log/celery/worker2.log -c 1000 -P gevent -O fair",
    #         ]
    #     depends_on:
    #         - redis
    #     links:
    #         - redis
    #         - postgres

volumes:
    paas-data:
        # external: true
        name: paas-data
    web-html:
        name: web-html
    api-html:
        name: api-html
    paas-dashboard:
        name: paas-dashboard